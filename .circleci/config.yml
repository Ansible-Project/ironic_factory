## Required ENV variables in CircleCI account:
# RACKSPACE_API_TOKEN
# RACKSPACE_PROJECT_ID
# RACKSPACE_SSH_PUB_KEY
# VAGRANT_CLOUD_TOKEN
# GITHUB_TOKEN

# Default YAML anchor, re-used in all CircleCI jobs
_job_defaults: &job_defaults
  working_directory: ~/images
  docker:
    - image: st2opsadmin/ovabuild-circle
      environment:
        IMAGE_DATE: "`date --iso-8601`"

# Re-used in jobs to terminate the Rackspace bare-metal device
_destroy_device: &destroy_device
  name: Destroy metal device on failure
  command: ansible-playbook -v -i inventory destroy.yml
  working_directory: .circleci/ansible/

# Defines default values for building an image.
# 
# The default values assume you are building a server image for use on KVM or XEN
# The artifact produced by the qemu builder is a qcow2 file suitable for use with
# OpenStack Ironic
_image_defaults: &image_defaults
  server: "server"
  skip-post-processors: "vagrant,vagrant-cloud,shell,manifests"
  builders: "qemu"
  scan: false
  upload: true

version: 2.1
commands:
  # create-containers
  # When invoked, creates a container for an instance on cloudfiles
  #
  # This requires the following ENV variables in CircleCI
  # RACKSPACE_API_TOKEN
  # RACKSPACE_PROJECT_ID
  # RACKSPACE_USERNAME
  # RACKSPACE_REGION
  create-containers:
    description: "Creates a container on Rackspace Cloudfiles"
    parameters:
      container-path:
        description: "Desired path of the container"
        type: string
        default: ""
    steps:
        - run:
          name: "Creating << parameters.container-path >> on Cloud Files"
          command: ansible-playbook -v -i inventory create-container.yml
          working_directory: .circleci/ansible/
  # upload-cloudfiles
  # When invoked, uploads the produced image to Cloud Files
  #
  # This requires the following ENV variables in CircleCI:
  # RACKSPACE_API_TOKEN
  # RACKSPACE_PROJECT_ID
  # RACKSPACE_USERNAME
  # RACKSPACE_REGION
  upload-cloudfiles:
    description: "Uploads an image to Cloud Files."
    parameters:
      source-path:
        description: "Defines the source path of the image."
        type: string
        default: ""
      dest-path:
        description: "Defines the destination path to upload to."
        type: string
        default: ""
    steps:
      - run:
          name: Uploading << parameters.source-path >> to Cloud Files
          command: ansible-playbook -v -i inventory upload-image.yml
          working_directory: .circleci/ansible/
  # runbuild
  # When supplied with parameters for an OS will run `packer build` for that OS
  # 
  # Default values are provided for Alpine, see the `jobs:` section of this file
  # to define which builds are to be run.
  runbuild:
    description: "Runs a packer build with the given attributes"
    parameters:
      os:
        description: "OS to build"
        default: "Alpine"
        type: enum
        enum: ["Alpine","Arch","CentOS","Debian","Ubuntu"]
      server:
        # Defines if a server os is to be built.
        # Desktop builds are provided for some packer templates
        # however, you should not need to change this value.
        description: "Defines if we are building a server OS"
        type: string
        default: "server"
      version:
        description: "The OS version to build"
        type: string
        default: "3.9"
      skip-post-processors:
        # A comma list of post-processors to skip. The values defined
        # here are fed to the '-except=""' packer parameter.
        # Possible values are: vagrant, vagrant-cloud, shell, manifest
        #
        # Since we are uploading to Cloud Files, this is set to skip 
        # everyting except 'shell' and 'manifest'. To enable building
        # of a vagrant '.box' file, you can change the value as follows:
        #
        # - run-build:
        #   skip-post-processors: "vagrant-cloud"
        description: "Defines the post processors to run"
        type: string
        default: "vagrant,vagrant-cloud,shell,manifest"
      builders:
        # A comma list of builds to run. The values defined here are fed
        # to the '-only=""' packer parameter. Possible values are:
        # vmare-iso, virtualbox-iso, and qemu
        #
        # Since we are building for Ironic, this is set to qemu by default
        # If additional builders are to be run, specify them as follows:
        #
        # - run-build:
        #   builders: "qemu,virtualbox-iso"
        description: "Defines a list of builds to run."
        type: string
        default: "qemu"
      scan:
        # Defines if the vulnerability scanner will be run.
        # Default is set to false as scanning is time intensive.
        # To enable scanning, change this value to true in the _image_defaults section
        # 
        # Example:
        #  _image_defaults: &image_defaults
        #    scan: true
        description: "Defines if the image should be vulnerability scanned."
        type: boolean
        default: false
      upload:
        description: "Defines if the image should be uploaded to Cloud Files."
        type: boolean
        default: false
    steps:
      - run: > 
          packer build \\
            -machine-readable \\
            -only=<< parameters.builders >> \\
            -except=<< parameters.skip-post-processors >> \\
            -var-file="<< parameters.os >>/<< parameters.version >>/<< parameters.server >>/box-info.json" \\
            -var-file="<< parameters.os >>/<< parameters.version >>/<< parameters.server >>/template.json" \\
            -var-file="private-vars.json" \\
            << parameters.os >>-<< parameters.server >>.json
      - when:
          condition: << parameters.upload >>
          steps:
            - upload-cloudfiles:
                source-path: "<< parameters.os >>/<< parameters.version >>/<< parameters.server >>/output-<< parameters.version >>-<< parameters.server >>-template-<< parameters.builders >>-${IMAGE_DATE}" 
                dest-path: "cloud files path?"


jobs:
  # Validate and update upstream artifact details in templates
  validate-upstream:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Check ISO
          command: python utils.py check_iso
      - run:
          name: Validate checksums
          command: python utils.py check_sha
      - run:
          name: Update templates
          command: python utils.py update_templates
          when: on_fail

  # Request creation of bare-metal server on Rackspace on-metal
  create-metal:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Create bare metal device
          command: ansible-playbook -v create.yml
          working_directory: .circleci/ansible/
      - persist_to_workspace:
          root: ~/images
          paths:
            - .circleci/ansible/.hosts
            - .circleci/ansible/inventory
      - run:
          <<: *destroy_device
          when: on_fail

  # Install the required software like Packer, Virtualbox, etc on bare-metal host
  provision-metal:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/images
      # Install the requirements like kvm on the bare-metal server.
      - run:
          name: Provision the bare metal server
          command: ansible-playbook -v -i inventory provision.yml
          working_directory: .circleci/ansible/
      - run:
          name: Sync git workspace to metal server
          command: rsync -avz -e 'ssh -o StrictHostKeyChecking=no' . root@metal:/home/images/
          environment:
            HOSTALIASES: .circleci/ansible/.hosts
      - run:
          <<: *destroy_device
          when: on_fail

  # Run packer builds
  run-builds:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/images
      - runbuild:
          # Build accepting all the defaults
          os: "Alpine"
          version: "3.9"
          <<: *image_defaults
      - runbuild:
          # Build with vuln scanning enabled
          os: "CentOS"
          version: "7"
          <<: *image_defaults
          scan: true
      - runbuild:
          # Build with all values specified
          os: "Ubuntu"
          version: "bionic64"
          server: "server"
          skip-post-processors: "vagrant,vagrant-cloud,shell,manifests"
          builders: "qemu"
          scan: false
          upload: true

  # Destroy the created Packet.net bare metal device.
  destroy-metal:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/ova
      - run:
          <<: *destroy_device
          name: Destroy bare-metal device

  # Destroy any packet.net bare metal devices running for more than an hour
  scrap-metal:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Destroy any metal hosts running longer than an hour
          command: .circleci/bin/scrap-metal

workflows:
  # Scheduled job to clean up cloud instances
  cleanup-cloud-instances:
    triggers:
      - schedule:
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - scrap-metal:
          filters:
            branches:
              only:
              - master
  # Run the builds on a schedule
  build-and-test:
    triggers:
      - schedule:
          cron: "0 0 4 1/14 * ? *"
          filters:
            branches:
              only:
                - master
    jobs:
      - validate-upstream:
          filters:
            branches:
              only:
                - master
      - create-metal:
          requires:
            - validate-upstream
          filters:
            branches:
              only:
                - master
      - provision-metal:
          requires:
            - create-metal
          filters:
            branches:
              only:
                - master
      - run-builds:
          requires:
            - provision-metal
          filters:
            branches:
              only:
                - master
      - destroy-metal:
          requires:
            - run-builds
          filters:
            branches:
              only:
                - master