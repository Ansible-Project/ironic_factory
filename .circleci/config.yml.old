## Required ENV variables in CircleCI account:
# RACKSPACE_API_TOKEN
# RACKSPACE_PROJECT_ID
# RACKSPACE_SSH_PUB_KEY
# VAGRANT_CLOUD_TOKEN
# GITHUB_TOKEN

# Default YAML anchor, re-used in all CircleCI jobs
_job_defaults: &job_defaults
  working_directory: ~/images
  docker:
    - image: st2opsadmin/ovabuild-circle

# Re-used in jobs to terminate the Rackspace bare-metal device
_destroy_device: &destroy_device
  name: Destroy metal device on failure
  command: ansible-playbook -v -i inventory destroy.yml
  working_directory: .circleci/ansible/

# Extract and export 'BOX_VERSION' when 'CIRCLE_TAG' ENV var is set
_pin_version_on_release: &pin_version_on_release
  run:
    name: Pin 'BOX_VERSION' on tag release
    command: |
      if [ ! -z "$CIRCLE_TAG" ]; then
        echo "export BOX_VERSION=$(echo $CIRCLE_TAG|grep -oP '(?<=\d-)\d{8}$')" >> $BASH_ENV
        . $BASH_ENV
        echo "Pinned BOX_VERSION=$BOX_VERSION based on release CIRCLE_TAG=$CIRCLE_TAG"
      else
        echo '$CIRCLE_TAG is not set, - skipping a non release build ...'
      fi

version: 2.1
commands:
  # Define builds
  define-builds:
    description: "Defines which packer builds to run"
    parameters:
      os-name:
        description: List of OSs to build
        type: steps
        default:
          - Alpine3.9
          - Alpine3.8
          - Alpine3.8
          - CentOS7
          - CentOS6
          - Debian9
          - Debian8
          - Ubuntu18.10
          - Ubuntu18.04
          - Ubuntu16.04
          - Ubuntu14.04
          - Ubuntu12.04
      steps:
        - steps: << parameters.os-name >>


  # Run packer build
  packer-build:
    description: "Runs packer build"
    parameters:
      template-json:
        type: string
        default: "~/images/Test/test.json"
      box-info-json:
        type: string
        default: "~/images/Test/dummy/server/box_info.json"
      box-template-json:
        type: string
        default: "~/images/Test/dummy/server/template.json"
    steps:
      - run:
        name: Packer Build << parameters.box-name >>
        command: | 
          packer build \
            -machine-readable \
            -only=qemu \
            -except=vagrant,vagrant-cloud \
            -var-file=<< box-info-json >> \
            -var-file=<< box-template-json >> \
            << parameters.template-file >>

jobs:
  # Validate and update upstream artifact details in templates
  validate-upstream:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Check ISO
          command: python utils.py check_iso
      - run:
          name: Validate checksums
          command: python utils.py check_sha
      - run:
          name: Update templates
          command: python utils.py update_templates
          when: on_fail
#
  build-images:
    <<: *job_defaults
    steps:
      - packer-build:


# TODO: Create inspec tests for the images
#
#  # Run Inspec Lint checks for test files
#  inspec-lint:
#    <<: *job_defaults
#    steps:
#      - checkout
#      - run:
#          name: Inspec Lint Check
#          command: |
#            cd test/integration/
#            for dir in */; do
#              dir=$(basename $dir)
#              if [ -f "${dir}/inspec.yml" ]; then
#                echo -e "\nRunning Inspec lint for \033[1;36m${dir}\033[0m ..."
#                inspec check --diagnose ${dir}
#              fi
#            done

  # Request creation of bare-metal server on Rackspace cloud
  create-metal:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Create bare metal device
          command: ansible-playbook -v create.yml
          working_directory: .circleci/ansible/
      - persist_to_workspace:
          root: ~/images
          paths:
            - .circleci/ansible/.hosts
            - .circleci/ansible/inventory
      - run:
          <<: *destroy_device
          when: on_fail

  # Install the required software like Packer, Virtualbox, etc on bare-metal Packet.net server
  provision-metal:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/images
      # Install the requirements like virtualbox on the bare metal server.
      - run:
          name: Provision the bare metal server
          command: ansible-playbook -v -i inventory provision.yml
          working_directory: .circleci/ansible/
      - run:
          name: Sync git workspace to metal server
          command: rsync -avz -e 'ssh -o StrictHostKeyChecking=no' . root@metal:/home/images/
          environment:
            HOSTALIASES: .circleci/ansible/.hosts
      - run:
          <<: *destroy_device
          when: on_fail

  # Run an OVA build via Packer on bare-metal server
  build-test-ova:
    <<: *job_defaults
    environment:
      HOSTALIASES: .circleci/ansible/.hosts
    steps:
      - checkout
      - attach_workspace:
          at: ~/images
      - <<: *pin_version_on_release
      - run:
          name: Build & Test OVA
          command: fab -f .circleci/bin/build.py -H metal build
      - run:
          name: Fetch back the produced OVA image
          command: rsync -avz -e 'ssh -o StrictHostKeyChecking=no' root@metal:/home/ova/builds .
      - store_artifacts:
          path: builds
          destination: .
      - persist_to_workspace:
          root: ~/ova
          paths:
            - builds
      - run:
          <<: *destroy_device
          when: on_fail

  deploy-ova:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/ova
      - <<: *pin_version_on_release
      - run:
          name: Deploy OVA to GitHub releases
          command: ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} builds/*.ova
      - run:
          name: Deploy BOX to Vagrant Cloud
          command: make deploy

  # Destroy the created Packet.net bare metal device.
  destroy-metal:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/ova
      - run:
          <<: *destroy_device
          name: Destroy bare-metal device

  # Destroy any packet.net bare metal devices running for more than an hour
  scrap-metal:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Destroy any metal hosts running longer than an hour
          command: .circleci/bin/scrap-metal

workflows:
  version: 2
  packer-st2-cleanup:
    triggers:
      - schedule:
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - scrap-metal:
          filters:
            branches:
              only:
                - master
  packer-st2:
    jobs:
      - packer-lint:
          filters:
            tags:
              only: /.*/
      - inspec-lint:
          filters:
            tags:
              only: /.*/
      - create-metal:
          requires:
            - packer-lint
            - inspec-lint
          filters:
            tags:
              only: /.*/
      - provision-metal:
          requires:
            - create-metal
          filters:
            tags:
              only: /.*/
      - build-test-ova:
          requires:
            - provision-metal
          filters:
            tags:
              only: /.*/
      - destroy-metal:
          requires:
            - build-test-ova
          filters:
            tags:
              only: /.*/
      - deploy-ova:
          requires:
            - build-test-ova
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+-\d{8}$/

experimental:
  notify:
    branches:
      only:
        - master
